<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[类与对象]]></title>
      <url>/2017/05/29/%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h3 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h3><a id="more"></a>
<h5 id="1-编程的发展阶段"><a href="#1-编程的发展阶段" class="headerlink" title="1.编程的发展阶段"></a>1.编程的发展阶段</h5><ul>
<li><p>机器语言</p>
</li>
<li><p>面向过程的语言</p>
<p>​     语言把代码组织成称为过程或函数的块</p>
<p>​    自顶向下，逐步求精。</p>
</li>
<li><p>面向对象语言</p>
<p>​     特性：封装性、继承性、多态性。</p>
<p>​     封装性：将数据和对数据的操作封装在一起，通过抽象，即从集体的实例中抽取共同的性质形成一般的概念。eg:类</p>
<p>​     继承性：子类可以继承父类的属性和功能，既继承了父类所具有的数据和数据上的操作，同时又可以增添子类独有的数据和数据上的操作。</p>
<p>​     多态性：</p>
<p>​          1.操作名称的多态性：</p>
<p>​           多个操作具有相同的名字，但这些操作所接收的信息类型不同 。</p>
<p>​          2.与继承相关的多态</p>
<p>​           同一个操作被不同类型对象调用时可能产生不同的行为。</p>
</li>
</ul>
<h5 id="2-类"><a href="#2-类" class="headerlink" title="2.类"></a>2.类</h5><ul>
<li><p>类的声明</p>
<p>​        1.声明规则：</p>
<p>​          类名若使用拉丁字母，名字的首字母大写。</p>
<p>​          类名易识别，见名知意</p>
<p>​        2.举例：  class People{…} class  汽车{…}</p>
</li>
<li><p>类体</p>
<p>​          组成：</p>
<p>​         一对{}以及之间的内容，内容由变量的声明和方法的定义两部分构成</p>
</li>
<li><p>成员变量和局部变量</p>
<p>​          1.类的成员变量：在类体的变量部分被声明的变量</p>
<p>​          2.类的局部变量：在类体的方法体中声明的变量和方法的参数</p>
<p>​          <strong>3.变量的类型：整型、浮点型、字符型、数组、对象、接口。</strong></p>
<p>​          4.变量的有效范围：</p>
<p>​                    成员变量在整个类内都有效。</p>
<p>​                    局部变量只在声明它的方法体中有效</p>
<p>​                    方法参数在整个方法内有效。</p>
<p>​                    方法体的局部变量从声明它的位置之后开始有效。</p>
<p>​          5.实例变量和类变量</p>
<p>​                   成员变量分为<strong>实例变量</strong>和<strong>类变量</strong>.</p>
<p>​                   类变量：使用关键字<strong>static</strong>修饰的变量。也称为静态变量、static变量</p>
<p>​                  实例变量：除了类变量之外</p>
<p>​          6.编程风格</p>
<p>​                   一行一变量，方便注释。</p>
<p>​                 变量的名字符合规定外，名字的首字母使用小写；变量名字有多个变</p>
<p>​                 量组成，从第二个单词开始首字母大写。</p>
<p>​                 见名知意。</p>
</li>
<li><p>方法</p>
<p>​                类的类体由变量的声明和方法体定义组成。</p>
<p>​               方法的定义：方法声明+方法体；</p>
<p>​               格式： 方法声明部分{ 方法体的内容;}</p>
<ul>
<li><p>方法的声明</p>
<p>​      方法的声明包括：<strong>方法名</strong>+<strong>方法的返回类型</strong></p>
<p>  <code>eg:float area(){...}</code></p>
<p>​      </p>
</li>
</ul>
</li>
<li><p>方法重载</p>
<p>​     java中多态分为两种：<strong>重载</strong>+<strong>重写</strong></p>
<p>​    功能的多态性：向功能传递不同的消息，以便让对象根据相应的消息来产生相应的行为。</p>
<p>​     功能多样性即方法重载</p>
<p>​     <strong>方法重载：一个类中可以有多个方法具有相同的名字，但这些方法的参数必须不同，即或者是参数的个数不同，或者是参数的类型不同。</strong></p>
<p>​    【注意】<strong>方法的返回类型和参数的名字不参与比较，即如果两个方法的名字相同，即使类型不同，也必须保证参数不同。</strong></p>
</li>
</ul>
<ul>
<li><p>构造方法</p>
<p>​    名字和所在类的类名相同，没有类型，构造方法可以重载。</p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> 长方形</span>&#123;</div><div class="line"> <span class="keyword">float</span> 长;</div><div class="line"> <span class="keyword">float</span> 宽;</div><div class="line">   长方形()&#123;</div><div class="line">   长=<span class="number">29</span>;</div><div class="line">   宽=<span class="number">48</span>;</div><div class="line">   &#125;</div><div class="line">   长方形(<span class="keyword">float</span> a,<span class="keyword">float</span> b)&#123;</div><div class="line">     长=a;</div><div class="line">     宽=b;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>类方法和实例方法</p>
<p>​    类中的方法：<strong>实例方法</strong>+<strong>类方法</strong></p>
<p>​           实例方法：方法类型前不加static修饰</p>
<p>​          类方法（静态方法）：方法前加static</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span>:</div><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;&#125;<span class="comment">//实例方法</span></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">float</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;&#125;<span class="comment">//类方法</span></div></pre></td></tr></table></figure>
</li>
<li><p>【注意】</p>
<p>   <strong>1.对成员变量的操作只能放在方法中，方法可以对成员变量和该方法体中声明的局部变量进行操作。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">ture:</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a=<span class="number">12</span>;</div><div class="line">    <span class="keyword">float</span> b=<span class="number">12.5f</span>;</div><div class="line">  &#125;</div><div class="line">flase:</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> a;</div><div class="line">    <span class="keyword">float</span> b;</div><div class="line">    a=<span class="number">12</span>;<span class="comment">//false,</span></div><div class="line">    b-<span class="number">12.5f</span>;<span class="comment">//false</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>​</p>
<p>  <strong>2.实例方法能操作类变量和成员变量，而类方法只能操作类变量。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> a;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> b;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    a=x;</div><div class="line">    b=y;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> z)</span></span>&#123;</div><div class="line">    a=x;<span class="comment">//非法，只可以对类变量进行操作</span></div><div class="line">    b=<span class="number">2</span>;<span class="comment">//合法</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h5 id="3-对象"><a href="#3-对象" class="headerlink" title="3.对象"></a>3.对象</h5><ul>
<li><p>创建对象</p>
<ul>
<li><p>对象的声明   </p>
<p>​    类名   对象名;</p>
</li>
<li><p>为对象分配内存</p>
</li>
<li><p>对象的内存模型    People p=new people();</p>
<p>   分配内存，并将返回一个引用给对象变量p;</p>
<p>   通过这个引用可以调用类中的属性和方法。</p>
</li>
</ul>
</li>
<li><p>使用对象</p>
<p>​     抽象的目的是产生类，而类的目的是创建具有属性和行为的对象。对象可以操作自己的变量产生类，也能调用。</p>
<ul>
<li>对象操作自己的变量（对象的属性）：   对象.变量</li>
<li>对象调用类中的方法：对象.方法</li>
</ul>
</li>
<li><p>对象的引用和实体</p>
<p>   堆：运行时的数据结构，是一个大的存储区域，用于支持动态的内存管理；</p>
<p> <strong>java的对象在堆中分配内存，对象的引用是在栈中分配内存空间。</strong></p>
</li>
</ul>
<h5 id="4-参数传值"><a href="#4-参数传值" class="headerlink" title="4.参数传值"></a>4.参数传值</h5><ul>
<li><p>基本的数据类型参数的传值</p>
<p>​     <strong>方法被调用时，如果方法有参数，参数必须要实例化，即参数必须有具体的值</strong></p>
<p>​     <strong>java中方法的所有参数都是传值的，即方法中的参数的值是调用者指定值一个副本。即如果方法改变参数的值，不会影响向该参数”传值”的变量的值，反之亦然。</strong></p>
<p>​     基本数据类型的参数，<strong>向该参数传递的值的级别不可以高于该参数的级别.</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">   <span class="keyword">double</span> width;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setA</span><span class="params">(<span class="keyword">double</span> width)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.width=width;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">getA</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> width;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">    A a=<span class="keyword">new</span> A();</div><div class="line">    <span class="keyword">double</span> w=<span class="number">2.3</span>;</div><div class="line">    a.setA(w);</div><div class="line">    System.out.println(a.getA());<span class="comment">//2.3</span></div><div class="line">    w=<span class="number">12</span>;</div><div class="line">    System.out.println(a.getA());<span class="comment">// 2.3</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>引用类型参数的传值</p>
<p>​    当参数是引用类型时，”传值”传递的是变量中存放的是”引用”，而不是变量所引用的实体。</p>
<p><img src="E:\图片下载\1.jpg" alt=""></p>
<p><img src="E:\qq文件下载\1632070678\FileRecv\MobileFile\2.JPG" alt=""></p>
</li>
<li><p>可变参数</p>
<p>  <strong>在声明方法时，不给出参数列表中从某项到最后一项的名字和个数，但这些参数的类型必须相同。</strong></p>
<p>public void f(int  … x)</p>
<p>x是方法f的参数列表中可变参数的”参数代表”。</p>
<p>又有：</p>
<p>public void f(double a,int …x)</p>
</li>
<li><p>有理数的封装</p>
</li>
</ul>
<h5 id="5-对象的组合"><a href="#5-对象的组合" class="headerlink" title="5.对象的组合"></a>5.对象的组合</h5><ul>
<li>一个类可以把对象作为自己的 成员变量，即该对象可以将其他对象作为自己的组成部分。</li>
</ul>
<h5 id="6-static关键字"><a href="#6-static关键字" class="headerlink" title="6.static关键字"></a>6.static关键字</h5><ul>
<li><p>实例变量和类变量的区别</p>
<p>​      <strong>不同对象的实例变量将被分配不同的内存空间，如果类中有类变量，那么所有的对象的这个类变量都将分配相同的一处内存，改变其中的一个对象的这个类变量会影响到其他对象的这个类变量。即对象共享类变量。</strong></p>
<p>​      类变量内存空间直到程序退出才被释放。</p>
<p>​     <em>类变量可以通过某个对象访问，也可以使用类名直接访问。实例变量只能通过对象访问。</em></p>
</li>
</ul>
<ul>
<li><p>实例方法和类方法的区别</p>
<p>​        <em>类方法可以通过某个对象访问，也可以使用类名直接访问。实例方法只能通过对象访问。</em></p>
<p>​      <strong>类方法的使用情景：如果一个方法不需要操作实例成员变量就可以实现某种功能，就可以将此方法声明为类方法。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> x,y,z;</div><div class="line">  <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getCon</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> sum;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=end;i++)&#123;</div><div class="line">      sum=sum+i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exam</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> resust=A.getCon(<span class="number">1</span>,<span class="number">100</span>);</div><div class="line">    System.out.println(result);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
</ul>
<h5 id="7-this关键字"><a href="#7-this关键字" class="headerlink" title="7.this关键字"></a>7.this关键字</h5><p>​     【注意】<strong><em>this表示某个对象，this可以出现在实例方法和构造方法中，但不可以出现在类方法中。</em></strong></p>
<ul>
<li><p>在构造方法中使用this</p>
<p>​    <strong>当this关键字出现在类的构造方法，代表该构造方法所创造的对象。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> leg,hand;</div><div class="line">  String name;</div><div class="line">  People(String s)&#123;</div><div class="line">    name=s;</div><div class="line">    <span class="keyword">this</span>.init();<span class="comment">//this可以省略</span></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">    leg=<span class="number">2</span>;</div><div class="line">    hand=<span class="number">2</span>;</div><div class="line">    System.out.println(name+<span class="string">"有"</span>+hand+<span class="string">"只手"</span>+leg+<span class="string">"条腿"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">    People boshi=<span class="keyword">new</span> People(<span class="string">"bushi"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>在实例方法中使用this</p>
<p>​       实例方法可以操作类的成员变量，当实例变量出现在实例方法中时，默认格式：    <strong>this.成员变量</strong></p>
<p>​       当static成员变量在实例方法中出现时，默认格式：<strong>类名.成员变量</strong></p>
<p>​              </p>
</li>
</ul>
<h5 id="8-访问权限"><a href="#8-访问权限" class="headerlink" title="8.访问权限"></a>8.访问权限</h5><ul>
<li>私有变量和私有方法</li>
<li>公有变量和公有方法</li>
<li>友好变量和友好方法</li>
<li>受保护的成员变量和方法</li>
<li>public类和友好类</li>
</ul>
<h5 id="9-基本数据类型的类封装"><a href="#9-基本数据类型的类封装" class="headerlink" title="9.基本数据类型的类封装"></a>9.基本数据类型的类封装</h5><ul>
<li>Double和Float类</li>
<li>Byte、Short、Interger和Long类</li>
<li>Character类</li>
<li>自动拆箱和装箱</li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[继承与接口(二)]]></title>
      <url>/2017/05/22/%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%8E%A5%E5%8F%A3(%E4%BA%8C)/</url>
      <content type="html"><![CDATA[<h3 id="继承与接口（二）"><a href="#继承与接口（二）" class="headerlink" title="继承与接口（二）"></a>继承与接口（二）</h3><a id="more"></a>
<h4 id="7-对象的上转型对象"><a href="#7-对象的上转型对象" class="headerlink" title="7.对象的上转型对象"></a>7.对象的上转型对象</h4><h5 id="什么是对象的上转型对象？"><a href="#什么是对象的上转型对象？" class="headerlink" title="什么是对象的上转型对象？"></a><em>什么是对象的上转型对象？</em></h5><p>​       假设A类是B类的父类，当用子类创建一个对象，并<strong>把这个对象的引用放到父类的对象中</strong>,如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">A a=<span class="keyword">new</span> B();</div><div class="line">或：</div><div class="line">A a;</div><div class="line">B b=<span class="keyword">new</span> B();</div><div class="line">a=b;</div></pre></td></tr></table></figure>
<p>称对象a是对象b的上转型对象。</p>
<h5 id="上转型对象的特点："><a href="#上转型对象的特点：" class="headerlink" title="上转型对象的特点："></a><em>上转型对象的特点：</em></h5><p>​      上转型对象不能操作操作子类新增的成员变量（失掉了这部分属性），不能调用子类新增的方法（失掉了一些功能）。</p>
<p>​      上转型对象可以访问子类继承或隐藏的成员变量，也可以调用子类继承的方法或子类的重写方法。若子类重写了父类的方法，则上转型对象调用的方法一定是重写的方法。</p>
<p><em>注：可以将上转型对象强制转换成子类对象，这样，该对象又具备了子类对象的所有的功能和属性。</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">Anthropoid.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Anthropoid</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> m=<span class="number">12.5</span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">crySpeak</span><span class="params">(String s)</span></span>&#123;</div><div class="line">    System.out.println(s);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">People.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> <span class="keyword">extends</span> <span class="title">Anthropoid</span></span>&#123;</div><div class="line"> <span class="keyword">char</span> m=<span class="string">'A'</span>;</div><div class="line"> <span class="keyword">int</span> n=<span class="number">60</span>;</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">computer</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</div><div class="line">   <span class="keyword">int</span> c=a+b;</div><div class="line">   System.out.println(a+<span class="string">"加"</span>+b+<span class="string">"等于"</span>+c)</div><div class="line"> &#125;</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">crySpeak</span><span class="params">(String s)</span></span>&#123;</div><div class="line">   System.out.println(m+<span class="string">"**"</span>+s+<span class="string">"**"</span>+m);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Example.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">    People people=<span class="keyword">new</span> People();</div><div class="line">    Anthropoid monkey=people;<span class="comment">//monkey是对象的上转型对象                   monkey.crySpeak("I love this game!");//等同于调用了People的</span></div><div class="line">                                         <span class="comment">//  重写方法</span></div><div class="line">    <span class="comment">//monkey.n=100;//非法，n是子类中新增的成员</span></div><div class="line">    <span class="comment">//monkey.computer(12,19); //非法，computer是新增方法</span></div><div class="line">    System.out.println(monkey.m);<span class="comment">//操作隐藏的m，不同于people.m</span></div><div class="line">    System.out.println(people.m);<span class="comment">//操作子类的m</span></div><div class="line">    People zhang=(People)monkey; <span class="comment">//强制转换为子类型</span></div><div class="line">    zhang.computer(<span class="number">55</span>,<span class="number">33</span>);</div><div class="line">    zhang.m=<span class="string">'T'</span>;          <span class="comment">//可以调用子类型的全部属性和方法</span></div><div class="line">    System.out.println(zhang.m); </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="8-继承与多态"><a href="#8-继承与多态" class="headerlink" title="8.继承与多态"></a>8.继承与多态</h5><p>​       <strong>当一个类中有许多的子类，并且这些子类都重写了父类中的某个方法时，那么把子类创建的对象的引用放到一个父类的对象中，就得到了该对象的一个上转型对象。</strong></p>
<p>​         这个上转型对象在调用这个方法时可能具有多种形态，<strong>因为不同的子类在重写父类的方法是可能产生不同的行为。</strong></p>
<p>​        <strong>多态性是指父类的某个方法被其子类重写时，可以各自产生自己的功能</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> 动物</span>&#123;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>&#123;</div><div class="line">  </div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> 狗 <span class="keyword">extends</span> 动物</span>&#123;</div><div class="line"><span class="keyword">void</span> cry&#123;</div><div class="line">  System.out.println(<span class="string">"汪汪...汪汪"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> 猫 <span class="keyword">extends</span> 动物</span>&#123;</div><div class="line"><span class="keyword">void</span> cry&#123;</div><div class="line">  System.out.println(<span class="string">"喵喵...喵喵"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="9-abstract类和方法"><a href="#9-abstract类和方法" class="headerlink" title="9.abstract类和方法"></a>9.abstract类和方法</h5><p>​    使用abstract修饰的类称为abstract方法，如:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​       <strong>abstract方法：只允许声明，不允许实现，而且不允许final和abstract修饰同一个方法。</strong></p>
<p>​     <strong>9.1抽象类的特点</strong></p>
<p>​       <strong>1 .在abstract类中可以有abstract方法也可以有普通的方法 </strong></p>
<p>​       <strong>2.abstract类中不能够使用new运算符创建对象，如果一个非抽象的类是某个抽象类的子类，则它必须重写父类的方法。</strong></p>
<p>   <em>注：abstract类也可以没有abstract方法。</em></p>
<p>​    <em>一个abstract类是abstract类的子类，他可以重写父类的abstract方法，也可以继承这个abstract类的方法。</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x-y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;<span class="comment">//普通B类继承抽象类，必须重写父类的方法</span></div><div class="line">    <span class="keyword">return</span> x+y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> Example&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">    B b=<span class="keyword">new</span> B();</div><div class="line">    <span class="keyword">int</span> sum=b.sum(<span class="number">30</span>,<span class="number">20</span>);<span class="comment">//调用重写的方法</span></div><div class="line">    <span class="keyword">int</span> sub=b.sub(<span class="number">30</span>,<span class="number">20</span>);<span class="comment">//调用继承的方法</span></div><div class="line">    System.out.println(<span class="string">"sum="</span>+sum);</div><div class="line">    System.out.println(<span class="string">"sub="</span>+sub);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​       <strong>抽象类只关心操作，即只关心方法的名字，类型和参数，不关心这些操作具体实现的细节，即不关心方法体。细节应当由抽象类的非抽象子类去实现，这些子类可以给出具体的实例来完成程序功能的具体实现。</strong></p>
<p>​     <strong>9.2抽象类与多态</strong></p>
<p>​           实现原理：使用上转型对象，<strong>将abstract类声明的对象作为其子类的上转型对象，则这个上转型对象就可以调用子类重写的方法</strong></p>
<p>​     体现了“开-闭”的程序设计原则即：<strong>允许扩展，不允许修改</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">eg:  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getAnimal</span><span class="params">()</span></span>;</div><div class="line">        &#125; </div><div class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Simulator</span></span>&#123;   </div><div class="line">          <span class="comment">//抽象类中定义了两个方法，具体的实现在以后子类调用的时候实现 </span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playSound</span><span class="params">(Animal animal)</span></span>&#123;</div><div class="line">          <span class="comment">//方法中以抽象类作为参数，animal是任何一个子类的上转型对                //象，可以调用Animal子类重写的方法,播放具体动物的声音          System.out.println("现在播放的是"+animal.getAnimalName()+"类的声音"); </span></div><div class="line">              animal.cry();</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">           <span class="keyword">public</span> Dog extends Animal&#123;<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>&#123;                         System.out.println(<span class="string">"汪汪...汪汪"</span>);</div><div class="line">            &#125;</div><div class="line">           <span class="function"><span class="keyword">public</span> String <span class="title">getAnimalName</span><span class="params">()</span></span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"狗"</span>;</div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">public</span> cat extends Animal&#123;<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cry</span><span class="params">()</span></span>&#123;                           System.out.println(<span class="string">"喵喵...喵喵"</span>);</div><div class="line">            &#125;  </div><div class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getAnimalName</span><span class="params">()</span></span>&#123;    </div><div class="line">                            <span class="keyword">return</span> <span class="string">"猫"</span>; </div><div class="line">               &#125;</div><div class="line">             &#125;</div><div class="line">      <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;            Simulator simulator=<span class="keyword">new</span> Simulator(); </div><div class="line">           <span class="function">simulator <span class="title">playSound</span><span class="params">(new Dog()</span>)</span>;  </div><div class="line">           <span class="function">simulator <span class="title">playSound</span><span class="params">(new cat()</span>)</span>;   </div><div class="line">            &#125;</div><div class="line">          &#125;</div></pre></td></tr></table></figure>
<h4 id="10-接口"><a href="#10-接口" class="headerlink" title="10.接口"></a>10.接口</h4><h5 id="10-1接口的声明和使用"><a href="#10-1接口的声明和使用" class="headerlink" title="10.1接口的声明和使用"></a>10.1接口的声明和使用</h5><h6 id="声明：-interface-接口的名字"><a href="#声明：-interface-接口的名字" class="headerlink" title="声明： interface 接口的名字"></a>声明： interface 接口的名字</h6><h6 id="接口体：包含常量定义和方法定义："><a href="#接口体：包含常量定义和方法定义：" class="headerlink" title="接口体：包含常量定义和方法定义："></a>接口体：包含常量定义和方法定义：</h6><p>​          接口体中只有抽象方法，没有普通的方法，而且接口体中所有常量和抽象方法的访问权限一定都是public</p>
<h6 id="接口的使用："><a href="#接口的使用：" class="headerlink" title="接口的使用："></a>接口的使用：</h6><p>​         一个类通过关键字implements声明自己实现一个或多个接口，如果实现多个接口，使用逗号隔开。如A类实现B和C的一个接口</p>
<p>​         class A implements B,C</p>
<p>   Animal的子类Dog实现B和C的接口</p>
<p>​       class Dog extends Animal implements B,C</p>
<ul>
<li><p>如果一个类中实现了某个接口，那么这个类必须重写这个类的所有方法。重写接口方法时，接口中的方法一定是public abstract方法，所以在类重写接口方法时不仅要去掉abstract给出方法体，还要访问权限一定要明显的用public来修饰（否则就降低了访问权限）。</p>
</li>
<li><p>需要引用包：import java.io.*</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Computable</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> MAX =<span class="number">100</span>;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">China</span> <span class="keyword">implements</span> <span class="title">Computable</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> number;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="comment">// public关键字不要忘记！！！</span></div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</div><div class="line">      sum=sum+i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​     <strong>类重写的接口方法以及接口中的常量可以被类的对象调用，而且常量可以用类名或接口名直接调用。</strong></p>
<p>​    <strong>接口可以继承</strong></p>
<p>​     <strong>声明接口时，前面加public时表明是公共接口，可以被任何一个类声明实现。如果不加public，是友好接口，可以被与该接口在同一个包中的类声明实现。</strong></p>
<p><em>如果一个类声明实现一个接口，但是没有重写该类中的所有方法，那么这个类一定是abstract类</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Computable</span></span>&#123;</div><div class="line">  <span class="keyword">final</span> <span class="keyword">int</span> Max=<span class="number">100</span>;</div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">speak</span><span class="params">(String s)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</div><div class="line">  <span class="function"><span class="keyword">float</span> <span class="title">g</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y)</span></span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> <span class="title">Computable</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=x;i++)&#123;</div><div class="line">      sum+=i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>接口的思想：它可以增加许多类都需要具有的功能，而且实现相同接口类不一定有继承关系</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">interface</span> 收费</span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> 收取费用();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">interface</span> 调节温度</span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> 调节温度();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> 公共汽车 <span class="keyword">implements</span> 收费</span>&#123;</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> 收费()&#123;</div><div class="line">  System.out.println(<span class="string">"1/元每公里"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> 出租车 <span class="keyword">implements</span> 收费,调节温度</span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> 收费()&#123;</div><div class="line">    ...</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> 调节温度()&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="10-3接口回调"><a href="#10-3接口回调" class="headerlink" title="10.3接口回调"></a>10.3接口回调</h5><p>接口回调：<strong>把实现某一接口的类创建的对象的引用赋给该接口声明的接口变量中，则该接口变量就可以调用被类重写的接口方法.</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ShowMessage</span></span>&#123;</div><div class="line">  <span class="keyword">void</span> 显示商标(String s);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tv</span> <span class="keyword">implements</span> <span class="title">ShowMessage</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">void</span> 显示商标(String s)&#123;</div><div class="line">    System.out.println(s);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">    ShowMessage sm;<span class="comment">//声明接口变量</span></div><div class="line">    sm=<span class="keyword">new</span> TV();<span class="comment">//接口变量中存放对象的引用</span></div><div class="line">    sm.显示商标(<span class="string">"长城牌电视机"</span>);<span class="comment">//接口回调</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​       把实现接口的类的实例的引用赋值给接口变量后该接口变量就可以回调类重写的接口方法。</p>
<h5 id="10-4接口与多态"><a href="#10-4接口与多态" class="headerlink" title="10.4接口与多态"></a>10.4接口与多态</h5><p>​     <strong>使用接口进行程序设计的核心思想：使用接口回调，即接口变量存放实现接口的类的对象的引用，从而接口变量可以回调实现接口方法。</strong></p>
<h5 id="10-5abstract类和接口的比较"><a href="#10-5abstract类和接口的比较" class="headerlink" title="10.5abstract类和接口的比较"></a>10.5abstract类和接口的比较</h5><ul>
<li>abstract类和接口都可以有abstract方法</li>
<li>接口中可以有常量，不能够有变量，而abstract中可以有常量和变量</li>
<li>abstract类中可以有非abstract方法，而接口不可以。</li>
</ul>
<p>​</p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/05/22/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[abstract类和方法]]></title>
      <url>/2017/05/20/abstract%E7%B1%BB%E5%92%8C%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="abstract类和方法"><a href="#abstract类和方法" class="headerlink" title="abstract类和方法"></a>abstract类和方法</h1><a id="more"></a>
<h2 id="1-abstract类的特点"><a href="#1-abstract类的特点" class="headerlink" title="1.abstract类的特点"></a>1.abstract类的特点</h2><p>​           <1>abstract类中可以有abstract方法，不同于普通类，其中可以有抽象方法，也可以没有抽象方法。</1></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">abstract class A&#123;</div><div class="line">  abstract int min(int x,int y);</div><div class="line">  int max(int x,int y)&#123;</div><div class="line">return x&gt;y;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​            <2>abstract类不能用new运算符创建对象。</2></p>
<p>  如果一个 非抽象的类是某个抽象类的子类，那么他必须重写父类的方法，给出方法体。所以final和abstract不能同时修饰一个方法体。</p>
<p><strong>abstract类可以没有abstract方法</strong></p>
<p><strong>如果一个abstract类是abstract类的子类，他可以重写父类的abstract方法，也可以继承这个abstract方法</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">   abstract class A&#123;</div><div class="line">     abstract int sum(int x,int y);//抽象类中定义了抽象的方法，具体的实现                                    //在调用抽象方法的类中</div><div class="line">     int sub(int x,int y)&#123;</div><div class="line">       return x-y;</div><div class="line">     &#125;</div><div class="line">   &#125;  </div><div class="line">    class B extends A&#123;   //类B继承了抽象类A</div><div class="line">      int sum(int x,int y)&#123;  //B必须对A中的抽象方法进行重写</div><div class="line">        return x+y;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    public class Example&#123;</div><div class="line">      public static void main(String args[])&#123;</div><div class="line">      B b=new B();</div><div class="line">      int sum=b.sum(30,20); //调用重写的方法 </div><div class="line">      int sub=b.sub(30,20);  //调用继承的方法</div><div class="line">      System.out.println(&quot;sum=&quot;+sum);</div><div class="line">      System.out.println(&quot;sum=&quot;+sub);</div><div class="line">         &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>​         <em>抽象类只关心方法的名字以及参数，具体的实现细节并不关心！！</em></p>
<h2 id="2-abstract类与多态"><a href="#2-abstract类与多态" class="headerlink" title="2.abstract类与多态"></a>2.abstract类与多态</h2><p>​     实现原理：使用上转型对象，<strong>将abstract类声明的对象作为其子类的上转型对象，则这个上转型对象就可以调用子类重写的方法</strong></p>
<p>​     体现了“开-闭”的程序设计原则即：<strong>允许扩展，不允许修改</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">  public abstract class Animal&#123;</div><div class="line">public abstract void cry();</div><div class="line">public abstract String getAnimal();</div><div class="line">&#125;</div><div class="line">  public class Simulator&#123;</div><div class="line">    //抽象类中定义了两个方法，具体的实现在以后子类调用的时候实现</div><div class="line">public void playSound(Animal animal)&#123;//方法中以抽象类作为参数，  </div><div class="line">//animal是任何一个子类的上转型对象，可以调用Animal子类重写的方法</div><div class="line">//播放具体动物的声音</div><div class="line">  System.out.println(&quot;现在播放的是&quot;+animal.getAnimalName()+&quot;类的声音&quot;);</div><div class="line">  animal.cry();</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">public Dog extends Animal&#123;</div><div class="line">public void cry()&#123;</div><div class="line">  System.out.println(&quot;汪汪...汪汪&quot;);</div><div class="line">&#125;</div><div class="line">public String getAnimalName()&#123;</div><div class="line">  return &quot;狗&quot;;</div><div class="line">  &#125;</div><div class="line">&#125; </div><div class="line">public cat extends Animal&#123;</div><div class="line">public void cry()&#123;</div><div class="line">  System.out.println(&quot;喵喵...喵喵&quot;);</div><div class="line">  &#125;</div><div class="line">  public String getAnimalName()&#123;</div><div class="line">    return &quot;猫&quot;;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"> public class Example&#123;</div><div class="line">public static void main(String args[])&#123;</div><div class="line">  Simulator simulator=new Simulator();</div><div class="line">  simulator playSound(new Dog());</div><div class="line">  simulator playSound(new cat());</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[内部类]]></title>
      <url>/2017/05/20/%E5%86%85%E9%83%A8%E7%B1%BB/</url>
      <content type="html"><![CDATA[<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><a id="more"></a>
<p>  普通类中包含两部分的成员：成员变量+方法</p>
<p>  而Java中支持另外的一种成员，内部类<br>  内部类：</p>
<pre><code>即Java中支持在一个类中声明另一个类，这样的类称之为内部类，
</code></pre><p>  ##外嵌类：<br>    而包含内部类的类称为内部类的外嵌类。</p>
<p>  ##区别与联系：<br>     内部类的外嵌类的成员变量在内部类中仍然有效，而内部类的方法已可<br>以调用外部类的方法。<br>     在内部类中不可以声明类变量和类方法，在外嵌类的类体中可以用内部类<br>声明的对象作为外嵌类的成员。<br>     内部类仅供他的外嵌类使用，其他类不可以用某个类的内部类声明对象。</p>
<p> ##类变量（静态变量）：前面加了static的变量</p>
<p> ##实例变量（对象变量）：没加static的变量</p>
<p> ##区别：<br>       类变量是所有对象共有，其中的一个对象将它的值改变，其他对象得到<br>     的就是改变后的结果；<br>       实例变量属于对象私有，某一个对象将其值改变，</p>
<p>##类方法：使用static修饰的方法</p>
<p>##注意：<br>类方法使用类名.类方法（）调用，而实例方法则不可以通过类名调用；<br>类方法不可以调用实例方法，不可以操作实例变量，因为在类创建对象之前实例<br>变量还没有分配内存，实例方法也没有入口地址<br>如果一个方法不需要操作类的实例成员变量就可以实现某种功能，可以考虑类方法；</p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[继承与接口(一)]]></title>
      <url>/2017/05/20/%E7%BB%A7%E6%89%BF%E4%B8%8E%E6%8E%A5%E5%8F%A3(%E4%B8%80)/</url>
      <content type="html"><![CDATA[<h3 id="继承与接口-一"><a href="#继承与接口-一" class="headerlink" title="继承与接口(一)"></a><blockquote class="blockquote-center">继承与接口(一)</blockquote></h3>   <a id="more"></a>
<h4 id="1-子类与父类"><a href="#1-子类与父类" class="headerlink" title="1.子类与父类"></a>1.子类与父类</h4><p>​      <strong>继承</strong>：利用已有的类创建新类。</p>
<p>先编写一个具有公共属性的一般类，再根据该一般类编写具有特殊属性的新类，新类继承一般类的状态和行为，并根据需要增加新的状态和行为。</p>
<p> 由继承得到的类称为<strong>子类</strong>，被继承的类称之为<strong>父类</strong>。</p>
<p>​    Java<strong>不支持</strong>多重继承。</p>
<h4 id="2-子类的继承性"><a href="#2-子类的继承性" class="headerlink" title="2.子类的继承性"></a>2.子类的继承性</h4><p>​         类包含的成员：成员变量+方法。</p>
<p>​        子类中的成员变量或方法一部分是子类自己声明的，一部分是继承父类的。</p>
<h4 id="2-1-子类和父类在同一个包中的继承性"><a href="#2-1-子类和父类在同一个包中的继承性" class="headerlink" title="2.1 子类和父类在同一个包中的继承性"></a>2.1 子类和父类在同一个包中的继承性</h4><p>​             子类和父类在同一个包下，子类自然继承了父类中不是private的成员变量或成员方法作为自己的成员变量和成员方法。</p>
<h4 id="2-2-子类和父类不在同一个包内的继承性"><a href="#2-2-子类和父类不在同一个包内的继承性" class="headerlink" title="2.2 子类和父类不在同一个包内的继承性"></a>2.2 子类和父类不在同一个包内的继承性</h4><p>​          子类和父类不在同一个包内，子类继承了父类的protected、public成员作为子类的成员变量，并且继承了父类中的protected、public方法作为子类的方法，继承的成员变量或方法的访问权限保持不变。<strong>但是，若子类和父类不在同一个包内，子类不能继承父类的友好变量和友好方法。</strong></p>
<p>​           <em>注：友好变量：不用private、public、protected修饰的成员变量和方法被称为友好变量和友好方法</em></p>
<h5 id="2-3protected的进一步说明"><a href="#2-3protected的进一步说明" class="headerlink" title="2.3protected的进一步说明"></a>2.3protected的进一步说明</h5><p>​               一个类中的protected成员变量和方法可以 被它的直接子类和间接子类继承。如：b是a的子类，c是b的子类，d是c的子类，那么，b、c、d都继承了a的protected成员变量和方法。</p>
<p>​                如果d类在d本身中创建了一个对象，那么该对象总是可以通过“.”运算符访问继承的或自己定义的protected变量和方法。但是，如果在另一个类中，如在other类中用d创建了一个对象object，该对象通过”.”运算符访问Protected变量和方法的权限如下：</p>
<p>​         <strong>1.</strong>子类D中声明的protected成员变量和方法，other类和D类在同一个包内，就可以访问。</p>
<p>​         <strong>2.</strong>子类D的对象和protected成员变量或protected方法是从父类继承的，那么要一直追溯到该protected成员变量或方法的祖先类，即A类。若other类和A类在同一个包内，object对象能访问继承protected变量和 protected方法。</p>
<h4 id="3-子类对象的构造过程"><a href="#3-子类对象的构造过程" class="headerlink" title="3.子类对象的构造过程"></a>3.子类对象的构造过程</h4><p>​     子类的构造方法没有明显的指明使用父类的哪一个构造方法，子类就调用父类不带参数的构造方法。</p>
<p><strong>当用子类创建对象时，不仅子类声明的成员变量被分配了内存空间，而且父类的成员变量也被分配了内存空间，但只是将其中一部分（子类继承的那一部分）作为分配给子类对象的变量。</strong></p>
<p><strong>子类中还有一些从父类中继承的方法，这部分方法可以继承那部分未被继承的变量，所以那些看似未被利用的内充空间也并非是垃圾。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">A.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">int</span> x;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</div><div class="line">    <span class="keyword">this</span>.x=x;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> y=<span class="number">12</span>;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setY</span><span class="params">(<span class="keyword">int</span> y)</span></span>&#123;</div><div class="line">  <span class="comment">//this.y=y+x;    这里是非法的，子类未继承父类的x变量</span></div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getY</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">主程序：</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">    B b=<span class="keyword">new</span> B();</div><div class="line">    b.setX(<span class="number">888</span>); <span class="comment">//子类虽然没有继承父类中的x变量，但是可以通过继承的父类                  //的setX方法来修改X的值</span></div><div class="line">    System.out.println(<span class="string">"子类对象未继承的x的值为："</span>+b.getX());</div><div class="line">    b.y=<span class="number">12.678</span>;</div><div class="line">    System.out.println(<span class="string">"子类对象的实例变量y的值是："</span>+b.getY());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-成员变量的隐藏和方法重写"><a href="#4-成员变量的隐藏和方法重写" class="headerlink" title="4.成员变量的隐藏和方法重写"></a>4.成员变量的隐藏和方法重写</h4><h4 id="4-1成员变量的隐藏-haha"><a href="#4-1成员变量的隐藏-haha" class="headerlink" title="4.1成员变量的隐藏:haha:"></a>4.1成员变量的隐藏:haha:</h4><p>​             子类声明的成员变量和父类声明的成员变量同名，子类就隐藏了继承的成员变量。</p>
<p>​            <strong>子类对象以及子类自己声明定义的方法操作与父类同名的成员变量是指子类重新定义这个成员变量</strong></p>
<p>​         <em>注意，子类对象可以调用从父类继承的方法操作隐藏的成员变量</em></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">double</span> x;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setX</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</div><div class="line">  <span class="keyword">this</span>.x=x;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> Student extends People&#123;</div><div class="line">  <span class="keyword">int</span> x;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getX</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="comment">//x=20.56;  错，x已经是int型的</span></div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-2方法的重写"><a href="#4-2方法的重写" class="headerlink" title="4.2方法的重写"></a>4.2方法的重写</h5><p>​         1.重写的语法规则</p>
<p>​          子类若可以继承某个实例方法，则该子类就可以重写这个方法；</p>
<p>​          <strong>方法重写是指在子类中定义一个方法，这个方法的类型和父类的方法的类型一致，或者是父类的方法类型的子类型（所谓子类型是指如果父类的方法是类，那么允许子类的重写方法的类型是子类），并且这个方法的名字、参数个数、参数类型和父类的完全相同。</strong></p>
<p>​           2.重写的目的</p>
<p>​           子类通过方法重写可以将父类的状态和行为改变为自身的状态和行为。</p>
<p>​           如果子类重写了父类的方法f，那么在使用子类创建对象时,对象调用方法f就是重写的方法f。</p>
<p>​          <strong>重写方法既可以操作继承的成员变量，又可以操作子类新声明的成员变量。若子类想使用被隐藏的方法，必须使用关键字super</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">calss A&#123;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x+y;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">g</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>  y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x+y;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">double</span> <span class="title">f</span><span class="params">(<span class="keyword">float</span> x,<span class="keyword">float</span> y)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> x*y;<span class="comment">//子类重写父类的方法，方法的名称，参数的个数、类型都和父类                //的相同</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​         3.改进</p>
<p>​            <strong>允许重写方法的类型是父类方法的类型的子类型，即不必完全一致。即如果父类的方法是类，那么子类中的重写方法可以是子类。</strong></p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">Createpeople类的子类CreateChinese重写了父类的createPeople()方法，重写方法的类型是Chinese类</div><div class="line">People.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"我是People！"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Chinese.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"我是中国人！"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Example.java</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">CreatePeople</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">createPeople</span><span class="params">()</span></span>&#123;<span class="comment">//方法的类型是People类</span></div><div class="line">      People p=<span class="keyword">new</span> People();</div><div class="line">      <span class="keyword">return</span> p;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">CreateChinese</span> <span class="keyword">extends</span> <span class="title">CreatePeople</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> Chinese <span class="title">createPeople</span><span class="params">()</span></span>&#123;<span class="comment">//重写的方法类型是People类的子类                                     //Chinese</span></div><div class="line">    Chinese chinese =<span class="keyword">new</span> Chinese();</div><div class="line">    <span class="keyword">return</span> chinese;</div><div class="line">    &#125;</div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">        CreateChinese create=<span class="keyword">new</span> CreateChinese();</div><div class="line">         Chinese zhang=create.createPeople();<span class="comment">//create调用重写的方法</span></div><div class="line">         zhang.speak();</div><div class="line">       &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​          <em>注意：重写父类方法是不可以降低方法的访问权限。</em></p>
<h4 id="5-super关键字"><a href="#5-super关键字" class="headerlink" title="5.super关键字"></a>5.super关键字</h4><h4 id="5-1使用super调用父类的构造方法"><a href="#5-1使用super调用父类的构造方法" class="headerlink" title="5.1使用super调用父类的构造方法"></a>5.1使用super调用父类的构造方法</h4><p>​     <strong>子类不能继承父类的构造方法，若子类使用父类的构造方法，必须在再累的构造方法中使用关键字super，而且super必须是子类构造方法的头一条语句。</strong></p>
   <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">Student.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> number;</div><div class="line">  String name;</div><div class="line">  Student()&#123;&#125;</div><div class="line">  Student(<span class="keyword">int</span> number,String name)&#123;</div><div class="line">    <span class="keyword">this</span>.number=number;</div><div class="line">    <span class="keyword">this</span>.name=name;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> number;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> name;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UniverStudent</span> <span class="keyword">extends</span> <span class="title">Student</span></span>&#123;</div><div class="line">  <span class="keyword">boolean</span> isMarriage;<span class="comment">//子类新增属性</span></div><div class="line">  UniverStudent(<span class="keyword">int</span> number,String name,<span class="keyword">boolean</span> b)&#123;</div><div class="line">    surper(number,name);<span class="comment">//调用父类的构造方法，执行                                           //Student(number,name);</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <em>注意：若在子类的构造方法中没有明显的写出super关键字来调用父类的某个构造方法，默认有：super();语句，即调用父类不带参数的构造方法.java就不提供默认构造方法（不带参数的构造方法），所以当父类中定义多个构造方法时，，应当包含一个不带任何参数的构造方法，以防止子类省略super时出现错误</em></p>
<h5 id="5-2使用super操作被隐藏的成员变量和方法"><a href="#5-2使用super操作被隐藏的成员变量和方法" class="headerlink" title="5.2使用super操作被隐藏的成员变量和方法"></a>5.2使用super操作被隐藏的成员变量和方法</h5><p>​     子类中使用被子类隐藏起来的成员变量或方法，可以使用super,super.x、surper.play()访问被子类隐藏起来的成员变量x和成员方法play()。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">Sum.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sum</span></span>&#123;</div><div class="line">  <span class="keyword">int</span> n;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> sum=<span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">      sum=sum+i;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> sum;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Average.java</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Average</span> <span class="keyword">extends</span> <span class="title">Sum</span></span>&#123;</div><div class="line">  <span class="keyword">double</span> n;<span class="comment">//子类继承的int型变量n被隐藏</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">f</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">double</span>  c;</div><div class="line">    <span class="keyword">super</span>.n=(<span class="keyword">int</span>)n;<span class="comment">//double型变量n做int转换，将结果赋给隐藏的int型变量n</span></div><div class="line">    c=<span class="keyword">super</span>.f();<span class="comment">//调用父类的方法f();</span></div><div class="line">    <span class="keyword">return</span> c+n;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">g</span><span class="params">()</span></span>&#123;</div><div class="line">    <span class="keyword">double</span> c;</div><div class="line">    c=<span class="keyword">super</span>.f();</div><div class="line">    <span class="keyword">return</span> c-n;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">Example.java</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span></span>&#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</div><div class="line">    Average aver=<span class="keyword">new</span> Average();</div><div class="line">    aver.n=<span class="number">100.5678</span>;</div><div class="line">    <span class="keyword">double</span> res1=aver.f();</div><div class="line">    <span class="keyword">double</span> res2=aver.g();</div><div class="line">    System.out.println(<span class="string">"res1="</span>+res1);</div><div class="line">    System.out.println(<span class="string">"res2="</span>+res2);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="6-final关键字"><a href="#6-final关键字" class="headerlink" title="6.final关键字"></a>6.final关键字</h4><h4 id="6-1final类"><a href="#6-1final类" class="headerlink" title="6.1final类"></a>6.1final类</h4><p>​           <strong>可以使用final将类声明为final类，final类不能被继承，即不能够有子类</strong></p>
<h5 id="6-2final方法"><a href="#6-2final方法" class="headerlink" title="6.2final方法"></a>6.2final方法</h5><p>​          <strong>如果使用final修饰父类的一个方法，该方法不允许子类重写。即不允许子类隐藏可以继承的final方法（不许任何修改）。</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">eg:</div><div class="line">Example.java</div><div class="line">class A&#123;</div><div class="line">  //final double PI;  非法，未给常量指定值</div><div class="line">  final double PI=3.1415926;  //PI是常量</div><div class="line">  public double getArea(final double r)&#123;</div><div class="line">//r=89; 非法，不允许修改</div><div class="line">  return PI*r*r; </div><div class="line">  &#125;</div><div class="line">  public final void speak()&#123;</div><div class="line">  System.out.println(&quot;您好，How&apos;s ?&quot;);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">class B extends A&#123;</div><div class="line">  /*</div><div class="line">非法，不能重写speak()方法</div><div class="line">  public void speak()&#123;</div><div class="line">System.out.println(&quot;nihao!&quot;);</div><div class="line">  &#125;</div><div class="line">  */</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>​     </p>
<p>​             </p>
<p>​         </p>
]]></content>
      
        <categories>
            
            <category> java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[oracle中不能够删除默认表空间]]></title>
      <url>/2017/05/19/oracle%E4%B8%AD%E4%B8%8D%E8%83%BD%E5%A4%9F%E5%88%A0%E9%99%A4%E9%BB%98%E8%AE%A4%E8%A1%A8%E7%A9%BA%E9%97%B4/</url>
      <content type="html"><![CDATA[<p><strong>【TABLESPACE】Oracle数据库默认永久表空间的查询及删除方法</strong></p>
<a id="more"></a>
<p>个人分类：故障处理与分析</p>
<p>每一个数据库，都有一个默认永久表空间与之对应。既然冠以“默认”的称号，索引这个表空间是不允许轻易被删除的。本文给出Oracle默认表空间的查询方法以及删除方法。</p>
<p><em>1.获取数据库的默认永久表空间</em></p>
<p>此信息可以通过DATABASE_PROPERTIES视图获取。</p>
<figure class="highlight plain"><figcaption><span>set lines 131</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">sys@ora10g&gt; col property_name for a30</div><div class="line"></div><div class="line">sys@ora10g&gt; col property_value for a30</div><div class="line"></div><div class="line">sys@ora10g&gt; col description for a40</div><div class="line"></div><div class="line">sys@ora10g&gt; select * from database_properties where property_name=&apos;DEFAULT_PERMANENT_TABLESPACE&apos;;</div><div class="line"></div><div class="line">PROPERTY_NAME PROPERTY_VALUE DESCRIPTION</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">DEFAULT_PERMANENT_TABLESPACE USERS Name of default permanent tablespace</div></pre></td></tr></table></figure>
<p>此系统的默认永久表空间是<strong>USERS</strong>。</p>
<p><em>2.尝试删除默认永久表空间</em></p>
<p><code>sys@ora10g&gt; drop tablespace USERS including contents and datafiles;</code></p>
<p><code>drop tablespace USERS including contents and datafiles</code></p>
<p>*</p>
<p>ERROR at line 1:</p>
<p><code>ORA-12919: Can not drop the default permanent tablespace</code></p>
<p>此时的“ORA-12919”报错详细的记录了问题原因。</p>
<p><em>3.默认永久表空间的删除方法</em></p>
<p>既然是因为是“默认”的永久表空间不可以删除，我们仅需将默认的永久表空间指定到其他表空间，然后USERS表空间便可以被顺利删除。</p>
<p>1）将数据库系统的默认永久表空间调整到TBS_SEC_D</p>
<p><code>sys@ora10g&gt; alter database default tablespace TBS_SEC_D;</code></p>
<p><code>Database altered.</code></p>
<p>2）确认调整效果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sys@ora10g&gt; select * from database_properties where </div><div class="line">property_name=&apos;DEFAULT_PERMANENT_TABLESPACE&apos;;</div><div class="line">PROPERTY_NAME PROPERTY_VALUE DESCRIPTION</div></pre></td></tr></table></figure>
<hr>
<p><code>DEFAULT_PERMANENT_TABLESPACE TBS_SEC_D Name of default permanent tablespace</code></p>
<p>3）删除原默认永久表空间USERS</p>
<p><code>sys@ora10g&gt; drop tablespace USERS including contents and datafiles;</code></p>
<p><code>Tablespace dropped.</code></p>
<p>删除成功。</p>
<p>4.小结</p>
<p>本文给出了Oracle数据库默认永久表空间的查询及删除方法。</p>
<p>BTW，通过database_properties视图我们可以获取数据库很多其他默认信息。如下所示。</p>
<p><code>sys@ora10g&gt; select * from database_properties;</code></p>
<p><code>PROPERTY_NAME PROPERTY_VALUE DESCRIPTION</code></p>
<hr>
<p>DICT.BASE 2 dictionary base tables version<br>。。。。。。 </p>
]]></content>
      
        <categories>
            
            <category> oracle </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 故障分析 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[it's my blog]]></title>
      <url>/2017/05/16/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      <content type="html"><![CDATA[<p>我的第一篇文章</p>
]]></content>
      
        <categories>
            
            <category> life </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
